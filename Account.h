//защита от дублирования кода
//если данный файл был уже ранее где-то подключен
//то повторно он уже не подключается к коду
#ifndef ACCOUNT_H
#define ACCOUNT_H

#include <iostream>
#include <string>

using namespace std;

//Класс - способ создания своего собственного типа данных
//в программе, далее мы можем заводить переменные этого типа
//которые будут хранить объекты и мы
//сможем оперировать этими объектами в программе
class Account {
    //поля класса - задают характеристики
    //описывают объекты и тип данных,
    //объект состоит из :
	string number;
	string surname;
	string name;
	string middleName;
	double balance;

	//означает что все что ниже написано будет доступно за пределами класса
public:
    //конструкторы
    //нужны для того чтобы создавать объекты и заполнять их поля

    //это конструктор без параметров, заполняет поля по дефолту
	Account();
    //это конструктор с параметрами
    //он заполняет поля теми данными, которые будут ему указаны в скобках
	Account(string number, string surname, string name, string middleName, double balance);
	//конец конструкторов

	//Методы
	//Нужны для операций с объектами
	//Вызываются(используются) методы для объектов
	//Метод  - функция, которая описана внутри
	//класса и работает с объектами этого класса
	//Метод увеличения баланса на заданную величину
	void increaseBalance(double increase);

	//Метод уменьшения баланса на заданную величину
	void decreaseBalance(double decrease);

	//Геттер для получения поля Number
	//Геттер - метод который не получает аргументов
	//на вход, но возвращает значение поля
	//слово const в конце метода означает что данный метод
	//константный, его можно вызывать для константных ссылок
	//данный метод не может изменять состояние объекта
	//то есть не может менять его поля
	string getNumber() const;

	//Сеттер устанавливает значение в поле
	void setNumber(string number);

	//Метод перевода денег другому аккаунту
	//На вход принимается ссылка на тот аккаунт,
	//кому переводим и сумма перевода
	//по ссылке передавать объекты в методы быстрее
	void transaction(Account& account, double transact);

	//Перегрузка Оператора сравнения аккаунтов на равенство
	bool operator == (const Account& account);

    double getBalance() const;
    void setBalance(double balance);

	//Перегрузка операторов вывода/ввода (вствка и извлечение из потока)
	//friend - ключевое слово которое позволяет внешним
	//функциям иметь доступ к закрытым полям объекта
	friend ostream& operator <<(ostream& os, const Account& account);
	friend istream& operator >>(istream& in, Account& account);
};

#endif
